For all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.

By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.

Use icons from lucide-react for logos.


我需要设计一款基于ai的链上trading 套利service，

总体要求如下：
1，总体支持拖拉拽组件编排任务流，然后自动执行套利交易，最后根据套利记录生成成功/失败/套利率等信息的报告
2，其中可拖拽的组件有：
一类：如Twitter Listener/Trust Solcial(支持预设按某些账号最新咨询 如Trump)、coinmaketing/uniswapv4/binance_listener(支持预设按某些合约交易对获取如最近72/24/12/6/4/1小时的价格趋势)
二类：Default AI Evaluator按照默认分析策略进行聚合前一步采集的信息并输出buy/sell套利策略推荐。之后支持Custom AI Evaluator 支持自定义system/assistant prompt分析策略并输出buy/sell交易策略
三类：TxExecutor 从前一步获取推荐交易策略，然后根据安全配置max/min amount per tx、slippage percent阈值变形交易amount，然后执行如 eth.send_tx调用用户预存到Vault ERC20合约的保证金发起交易
四类：Async Collector 异步收集交易执行结果(tx状态和最终滑点)
3，要求后端用nextjs或python实现(考虑到这是黑客PoC项目你觉得那种好)，要求生成完整不要有任何省略，前端用react vite

前端详细要求如下：
4，新增支持 github 的登录页面，之后所有如Workflow配置操作都应该关联用户
5，请生成 api_service.ts mock_service.ts http_service.ts，并在右上角支持切换（默认暂时先为 mock）
6，第一个菜单应该叫 Dashboard（即 Live Monitor）
7，workflow builder 应放到第二个菜单且rename为Workflows 即可。另外目前测试运行发现 data listener, data evaluator 等组件可以拖拽过来，但无法连接（我希望暂时应该支持 one-to-one 连接，且增加必须的节点: start,end）
7.1，当点击 Save 按钮会首先将当前 workflow json 写到 local storage 然后异步调用 (mock|http) storage service 的保存接口，同理如果是点击 Run 按钮则调用 run 接口（此接口后端逻辑是先保存一个新版本，然后再启动一次 workflow 运行）
8，增加 Workflows 页面相对底部应该是一块可上下折叠/展开的 workflow 列表的浮动区域（这个区域顶边的中间有向上向下的箭头），然后列表最右列为 “操作”（每行数据有：重新设计，运行记录 2个按钮）
8.1，当点击 重新设计 时，在get请求这个workflow id的json，然后在当前 flow editor 渲染它；
8.2，当点击 运行记录 时，直接在当前浮动区域块打开新的列表块来加载  workflow runs 记录列表（ID,start date,end date,run type(scheduled,manual),state(queued,running,success,failed),proflit），其在这个区域块的左上角有个类似 “< workflows” 的标志可以返回查看 workflows 列表，这个区域布局有点类似 阿里云 E-MAPREDUCE 的 Workflow 设计页面下面有浮动的区域显示运行记录和详情配置。
8.3，注：目前这个 Workflow Builder 的页面底部的这个浮动页面有问题要删掉
9，当具体某条 Workflow run 记录的详情时，在  flow editor 加载该次运行的每个节点详情（注：每个节点的配置都是只读不可编辑），每个节点按运行状态展示不同的颜色（queued：黄色，running：小动物在跑步颜色你推荐，success：绿色打钩，failed：红色小叉叉 ），点击每个节点将弹出该节点的运行日志信息（布局使用类似 web termial 黑框展示），

后端接口逻辑/要求：
10，nextjs 实现接口，将 Workflow 配置 json 和 Workflow run记录分别存储到 PG 的 t_workflow（id,name,flow_json,create_at,update_at,del_flag）和t_workflow_run (id,params(jsonp类型),start date,end date,run_type,state,proflit(jsonp类型)) 表
11，workflow run 的 post 接口，应该先加入到 run_queue.offer(WorkflowRun对象) 中，然后有个 WorkflowController.run() 函数中 loop 死循环不断的从 run_queue.poll() 消费任务、改状态&更新到PG、调用 WorkflowEngine 执行(每种节点hardcode的逻辑（如fetch twitter api的 trump 最新咨询）、请求 chatgpt或deepseek的 completes 接口（如包括上一步的 fetch 咨询数据+改节点配置的 system prompt），或执行 custom 的js脚本逻辑(beta))、改状态更新到PG